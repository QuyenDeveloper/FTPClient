/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import FTP.treeCellRenderer;
import FTP.serverTreeCellRenderer;
import FTP.sendFile;
import FTP.deleteFileOrFolder;
import FTP.downloadFile;
import FTP.filter;
import FTP.renameFileorFolder;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import org.apache.commons.net.ftp.*;
import FTP.*;
import java.awt.Image;
import java.awt.event.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.*;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.*;
import org.openide.awt.DropDownButtonFactory;
import org.openide.util.Exceptions;

/**
 *
 * @author ACER
 */
public class ClientGUI extends javax.swing.JFrame {

    /**
     * Creates new form ClientGUI
     */
    public ClientGUI() {
        this.queueList = new ArrayList<String>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tabPane = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        queueTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        serverTreelb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        serverTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        clientTree = new javax.swing.JTree();
        clientTreelb = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Usernametf = new javax.swing.JTextField();
        Usernamelb = new javax.swing.JLabel();
        Passlb = new javax.swing.JLabel();
        Passtf = new javax.swing.JPasswordField();
        Serverlb = new javax.swing.JLabel();
        Servertf = new javax.swing.JTextField();
        Portlb = new javax.swing.JLabel();
        Porttf = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        notifiTextArea = new javax.swing.JTextArea();
        connectBtn = new javax.swing.JButton();
        connectHistoryTB = new javax.swing.JToolBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FTP Client");
        setIconImage(new ImageIcon(getClass().getClassLoader().getResource("img/transfer.png")).getImage());

        String colum_header[]= {"Local file path","Remote file path","Size"};
        queueTableModel = new DefaultTableModel(colum_header,0);
        queueTable.setModel(queueTableModel);
        queueTable.setShowGrid(false);
        queueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                queueTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(queueTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 813, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 813, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 79, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        tabPane.addTab("Queue", jPanel4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabPane))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 112, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(tabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        serverTreelb.setLabelFor(jScrollPane1);
        serverTreelb.setText("Server File");
        serverTreelb.setToolTipText("");
        serverTreelb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        serverTree.setModel(serverTreeModel);
        serverTree.setCellRenderer(new serverTreeCellRenderer());
        serverTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serverTreeMouseClicked(evt);
            }
        });
        serverTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                serverTreeTreeWillExpand(evt);
            }
        });
        jScrollPane1.setViewportView(serverTree);

        addItemToClientTree();
        clientTree.setModel(clientTreeModel);
        clientTree.setCellRenderer(new treeCellRenderer());
        clientTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                clientTreeTreeExpanded(evt);
            }
        });
        clientTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientTreeMouseClicked(evt);
            }
        });
        clientTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                clientTreeTreeWillExpand(evt);
            }
        });
        jScrollPane2.setViewportView(clientTree);

        clientTreelb.setLabelFor(jScrollPane2);
        clientTreelb.setText("Client File");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(serverTreelb, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 80, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientTreelb, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverTreelb)
                    .addComponent(clientTreelb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Usernametf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernametfActionPerformed(evt);
            }
        });

        Usernamelb.setText("User Name");

        Passlb.setText("Password");

        Passtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasstfActionPerformed(evt);
            }
        });

        Serverlb.setText("Server");

        Portlb.setText("Port");

        Porttf.setText("21");
        Porttf.setName(""); // NOI18N
        Porttf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PorttfActionPerformed(evt);
            }
        });

        notifiTextArea.setEditable(false);
        notifiTextArea.setColumns(20);
        notifiTextArea.setRows(4);
        jScrollPane4.setViewportView(notifiTextArea);

        connectBtn.setText("Connect");
        connectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBtnActionPerformed(evt);
            }
        });

        String dataFolder = System.getenv("APPDATA");
        String logFileString = dataFolder+"\\FTPConnectHistory.txt";
        File logFile = new File(logFileString);

        popupMenu.add(clearConnect);
        clearConnect.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String empty = "";
                Usernametf.setText(empty);
                Passtf.setText(empty);
                Servertf.setText(empty);
                Porttf.setText(empty);
            }
        });

        popupMenu.add(clearHistory);

        clearHistory.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    FileWriter fwOb = new FileWriter(logFile, false);
                    PrintWriter pwOb = new PrintWriter(fwOb, false);
                    pwOb.flush();
                    pwOb.close();
                    fwOb.close();
                    popupMenu.removeAll();
                    popupMenu.add(clearConnect);
                    popupMenu.add(clearHistory);
                    popupMenu.addSeparator();
                    addMenuItem(logFile);
                    popupMenu.updateUI();
                }catch(IOException ei){}
            }
        });

        popupMenu.addSeparator();
        addMenuItem(logFile);
        ImageIcon icon = new ImageIcon();
        JButton dropDownButton = DropDownButtonFactory.createDropDownButton(icon, popupMenu);
        ImageIcon dropDownButtonIcon = new ImageIcon(getClass().getClassLoader().getResource("img/plus.png"));
        dropDownButton.setIcon(dropDownButtonIcon);
        connectHistoryTB.add(dropDownButton);
        connectHistoryTB.setRollover(true);
        connectHistoryTB.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Usernamelb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Usernametf, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Passlb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Passtf, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Serverlb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Servertf, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Portlb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Porttf, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectHistoryTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane4)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Usernamelb, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Usernametf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Passlb, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Passtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Serverlb, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Servertf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Portlb, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Porttf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(connectBtn))
                    .addComponent(connectHistoryTB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtnActionPerformed
        // TODO add your handling code here:
        connect();
    }//GEN-LAST:event_connectBtnActionPerformed

    private void serverTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverTreeMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {serverTreeRightClick(evt);}
    }//GEN-LAST:event_serverTreeMouseClicked

    private void PasstfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasstfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasstfActionPerformed

    private void UsernametfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsernametfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsernametfActionPerformed

    private void PorttfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PorttfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PorttfActionPerformed

    private void clientTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientTreeMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {clientTreeRightClick(evt);}
    }//GEN-LAST:event_clientTreeMouseClicked

    private void clientTreeTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_clientTreeTreeExpanded
        // TODO add your handling code here:
        
    }//GEN-LAST:event_clientTreeTreeExpanded

    private void clientTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_clientTreeTreeWillExpand
        // TODO add your handling code here:
        TreePath path = evt.getPath();
        String tempPath = "";
        if (path != null) {
            tempPath = path.toString().replace("]", "");
            tempPath = tempPath.replace("[", "").replaceAll(",", "/");
            tempPath = tempPath.replaceAll("/ ", "/");
        }
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
        File file = new File(tempPath);
        try {
            addClientTreeChild(file, node);
        } catch (Exception e) {}
    }//GEN-LAST:event_clientTreeTreeWillExpand

    private void queueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queueTableMouseClicked
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {queueTableRightClick(evt);}
    }//GEN-LAST:event_queueTableMouseClicked

    private void serverTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_serverTreeTreeWillExpand
        TreePath path = evt.getPath();
        String tempPath = "";
        if (path != null) {
            tempPath = path.toString().replace("]", "");
            tempPath = tempPath.replace("[", "").replaceAll(",", "/");
            tempPath = tempPath.replaceAll("/ ", "/");
        }
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
        File file = new File(tempPath);
        
        folderPath = findFilePath(file.getName(), pathList);
        addChilde(folderPath, node);
    }//GEN-LAST:event_serverTreeTreeWillExpand


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Passlb;
    private javax.swing.JPasswordField Passtf;
    private javax.swing.JLabel Portlb;
    private javax.swing.JTextField Porttf;
    private javax.swing.JLabel Serverlb;
    private javax.swing.JTextField Servertf;
    private javax.swing.JLabel Usernamelb;
    private javax.swing.JTextField Usernametf;
    private javax.swing.JTree clientTree;
    private javax.swing.JLabel clientTreelb;
    private javax.swing.JButton connectBtn;
    private javax.swing.JToolBar connectHistoryTB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea notifiTextArea;
    private javax.swing.JTable queueTable;
    private javax.swing.JTree serverTree;
    private javax.swing.JLabel serverTreelb;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables
    private String error;
    private FTPClient ftpClient = new FTPClient();
    private String notifyMessage;
    private List<String> pathList;
    private final DefaultMutableTreeNode root = new DefaultMutableTreeNode("");
    private DefaultTreeModel serverTreeModel;
    private DefaultTreeModel clientTreeModel;
    private String folderPath;
    private final List<String> queueList;
    private final JPopupMenu popupMenu = new JPopupMenu();
    private final JMenuItem clearHistory = new JMenuItem("Clear History");
    private final JMenuItem clearConnect = new JMenuItem("Clear Connect Bar");
    
    private  DefaultTableModel queueTableModel = new DefaultTableModel();
    
    private final connectServer s = new connectServer();
    private final renameFileorFolder ff = new renameFileorFolder();
    private final downloadFile downloadFile = new downloadFile();
    private final deleteFileOrFolder deleteFileOrFolder = new deleteFileOrFolder();
    private final sendFile sendFile = new sendFile();
    
    /**
     * @param av
     */
    public static void main(String[] av) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ClientGUI().setVisible(true);
        });
    }
    
    //kêt nối với server
    private void connect() {
        boolean valid = loginValidate();
        if (!valid) {
            notification(error);
            return;
        }
        try {
            if(connectBtn.getText().equals("Connect")){
                ftpClient = s.connectFTPServer(Servertf.getText(), Usernametf.getText(), Passtf.getText());
                if (!ftpClient.isConnected()) {
                    notifyMessage = "Connect to "+Usernametf.getText()+"@"+Servertf.getText()+"  Fail";
                    notification(notifyMessage);
                }else{
                    if(ftpClient.getReplyCode() == 530){
                        notifyMessage = "Username or Password wrong";
                        notification(notifyMessage);
                        return;
                    }
                    notifyMessage = "Connect to "+Usernametf.getText()+"@"+Servertf.getText()+"  Successful";
                    notification(notifyMessage);
                    recordLoginInfo();
                    ftpClient.setAutodetectUTF8(true);
                    ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                    pathList = s.getRealPath();
                    root.removeAllChildren();
                    List<FTPFile> listFtpFiles = s.getListFileFromFTPServer("");
                    addItemToTree(listFtpFiles);
                    connectBtn.setText("Disconnect");
                }
            }else{
                notifyMessage = "Disconnect Successfull";
                notification(notifyMessage);
                ftpClient.logout();
                ftpClient.disconnect();
                connectBtn.setText("Connect");
                root.removeAllChildren();
                serverTree.updateUI();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }
    //Lưu thông tin đăng nhập 
    private void recordLoginInfo(){
        try {
            String dataFolder = System.getenv("APPDATA");
            String logFileString = dataFolder+"\\FTPConnectHistory.txt";
            File logFile = new File(logFileString);
            
            logFile.createNewFile();
            List<String> user = new ArrayList<>();
            
            user.add(Usernametf.getText());
            user.add(Passtf.getText());
            user.add(Servertf.getText());
            user.add(Porttf.getText());
            
            boolean exist;
            try (Scanner myReader = new Scanner(logFile)) {
                exist = false;
                while (myReader.hasNextLine()) {
                    String data = myReader.nextLine();
                    if (user.toString().equals(data)) {
                        exist = true;
                    }
                }
            }
            
            if(!exist){
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(logFile, true))) {
                    writer.write(user.toString());
                    writer.newLine();
                }
            }
            
            popupMenu.removeAll();
            popupMenu.add(clearConnect);
            popupMenu.add(clearHistory);
            popupMenu.addSeparator();
            addMenuItem(logFile);
            popupMenu.updateUI();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    //kiểm tra đã nhập thông tin hay chưa
    private boolean loginValidate() {
        error = "";
        Usernametf.setBackground(Color.WHITE);
        Passtf.setBackground(Color.white);
        Servertf.setBackground(Color.white);
        if (Usernametf.getText().length() == 0) {
            error = error + "User Name is mandatory\n";
            Usernametf.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
        }

        if (Passtf.getText().length() == 0) {
            error = error + "Password is mandatory\n";
            Passtf.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
        }

        if (Servertf.getText().length() == 0) {
            error = error + "Server is mandatory\n";
            Servertf.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.red));
        }
        // Show the errorText in a message box, or in a label, or ...
        return error.isEmpty();
    }
    //thông báo
    private void notification(String message) {
        String existedText = notifiTextArea.getText();
        notifiTextArea.setText(existedText + message + "\n");
    }
    //add item vào server tree
    private void addItemToTree(List<FTPFile> ftpFileList) {
        serverTreeModel = new DefaultTreeModel(root);
        for (FTPFile ftpFile : ftpFileList) {
//            System.err.println(ftpFile + ": " + ftpFile.getType());
            
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(ftpFile.getName());
            root.add(node);
            //showChildren(node);
            //
            if (ftpFile.isDirectory()) {
                DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("temp");
                node.add(node1);
            }
            //
        }
        serverTree.setModel(serverTreeModel);
        serverTree.setVisible(true);
    }
    //add file con và server tree
    private void addChilde(String ftpFilePath, DefaultMutableTreeNode node) {
        node.removeAllChildren();
        List<FTPFile> ftpFileList1 = s.getListFileFromFTPServer(ftpFilePath);
        for (FTPFile file : ftpFileList1) {
            if (file.isDirectory()) {
                DefaultMutableTreeNode node1 = new DefaultMutableTreeNode(file.getName());
                DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("temp");
                node.add(node1);
                node1.add(node2);
            } else node.add(new DefaultMutableTreeNode(file.getName()));
        }
    }
    //add item vào client tree
    private void addItemToClientTree(){
        clientTreeModel = new DefaultTreeModel(root);
        for (File file : File.listRoots()) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(file);
            node.add(new DefaultMutableTreeNode("temp"));
            root.add(node);
        }
    }
    //add file con vào client tree
    private void addClientTreeChild(File file,DefaultMutableTreeNode node){
        node.removeAllChildren();
        for(File f : file.listFiles()){
            DefaultMutableTreeNode node1 = new DefaultMutableTreeNode(f.getName());
            if(f.isDirectory()){
                DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("temp");
                node1.add(node2);
            }
            node.add(node1);            
        }   
    }
    //tìm đường dẫn ở server
    private String findFilePath(String fileName, List<String> l) {
        String finalPath = null;
        String[] result;
        for (String a : l) {
            result = a.split("/");
            if (result[result.length - 1].equals(fileName)) {
                finalPath = a;
            }
        }
        return finalPath;
    }
    //chức năng hiển thị menu ở server tree
    private void serverTreeRightClick(MouseEvent e){
        ImageIcon icon;
        JPopupMenu menu = new JPopupMenu();
        JMenuItem jmnremane = new JMenuItem("Rename");
        icon = new ImageIcon(getClass().getClassLoader().getResource("img/rename.png"));
        jmnremane.setIcon(icon);
        JMenuItem jmndownload = new JMenuItem("Download");
        icon = new ImageIcon(getClass().getClassLoader().getResource("img/download.png"));
        jmndownload.setIcon(icon);
        JMenuItem jmndelete = new JMenuItem("Delete");
        icon = new ImageIcon(getClass().getClassLoader().getResource("img/delete.png"));
        jmndelete.setIcon(icon);
        JMenuItem jmnNewFolder = new JMenuItem("New folder");
        icon = new ImageIcon(getClass().getClassLoader().getResource("img/open-folder.png"));
        jmnNewFolder.setIcon(icon);
        JMenuItem jmnAddToQ = new JMenuItem("Add to Queue");
        icon = new ImageIcon(getClass().getClassLoader().getResource("img/plus.png"));
        jmnAddToQ.setIcon(icon);
        //lấy vị trí chuột và select item ở tree trên vị trí chuột đó
        JTree list = (JTree) e.getSource();
        int row = list.getRowForLocation(e.getPoint().x, e.getPoint().y);
        TreePath treePath = list.getPathForLocation(e.getPoint().x, e.getPoint().y);
        list.setSelectionRow(row);
        //format treePath thành 1 đường dẫn có thể dùng 
        String filePath = "";
        if (treePath != null) {
            filePath = treePath.toString().replace("]", "");
            filePath = filePath.replace("[", "").replaceAll(",", "/");
            filePath = filePath.replaceAll("/ ", "/");
            filePath = filePath.replaceAll("/", "\\\\");
        }
        File fileName = new File(filePath);
        menu.add(jmnNewFolder);
        menu.add(jmnAddToQ);
        menu.add(jmnremane);
        menu.add(jmndownload);
        menu.add(jmndelete);
        
        DefaultMutableTreeNode tempNode = (DefaultMutableTreeNode) list.getLastSelectedPathComponent();
        
        if(treePath == null){
            jmnAddToQ.setEnabled(false);
            jmndelete.setEnabled(false);
            jmndownload.setEnabled(false);
            jmnremane.setEnabled(false);
        }else if(tempNode.isLeaf()){
            jmnNewFolder.setEnabled(false);
        }
        
        //menu sẽ được hiện ở vị trí con trỏ chuột
        menu.show(this, getMousePosition().x, getMousePosition().y);
        
        String finalFilePath = filePath;
        jmnNewFolder.addActionListener((ActionEvent e1) ->{
            if (!ftpClient.isConnected()) {
                notification("Please connect to a server");
                return;
            }
            
            list.expandPath(treePath);

            DefaultMutableTreeNode tempNode2 = new DefaultMutableTreeNode("New Folder");
            DefaultMutableTreeNode tempNode3 = new DefaultMutableTreeNode("temp");
            tempNode2.add(tempNode3);
            if(tempNode == null){
                root.add(tempNode2);
            }else{
                tempNode.add(tempNode2);
            }


            TreePath newPath = getPath(tempNode2);

            list.putClientProperty("JTree.lineStyle", "Angled");
            JTextField textField = new JTextField();
            TreeCellEditor editor = new DefaultCellEditor(textField);
            list.setCellEditor(editor);
            list.setEditable(true);
            list.updateUI();

            System.err.println(newPath.toString());
            list.startEditingAtPath(newPath);
            textField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusLost(FocusEvent e2) {
                    super.focusLost(e2);

                    try {
                        JTextField jtf = (JTextField) e2.getSource();
                        String newFolderPath = finalFilePath+"\\"+jtf.getText();
                        boolean success = ftpClient.makeDirectory(newFolderPath);
//                        if (success){
//                            notifyMessage = "Rename "+finalFilePath+" to /"+jtf.getText()+" Successfull";
//                        }else notifyMessage = "Rename Fail";
                        list.setEditable(false);
                        notification(notifyMessage);
                        refresh();
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            });
        });
        
        
        //addToQueue btn function
        jmnAddToQ.addActionListener((ActionEvent e1) -> {
            if (!ftpClient.isConnected()) {
                notification("Please connect to a server");
                return;
            }
            try {
                ftpClient.sendCommand("SIZE",fileName.toString());
                String reply = ftpClient.getReplyString();
                String[] r = reply.split(" ");
                
                queueList.add(fileName.toString());
                DefaultTableModel model = (DefaultTableModel) queueTable.getModel();
                model.addRow(new Object[]{System.getProperty("user.home") + "\\Downloads"+fileName, fileName, r[1] + " bytes"});
                
                notification("Added "+fileName+" to Queue");
                
                queueTable.setModel(model);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        });
        
        
        //nút rename
        jmnremane.addActionListener((ActionEvent e1) -> {
            if (!ftpClient.isConnected()) {
                notification("Please connect to a server");
                return;
            }
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) list.getLastSelectedPathComponent();
            list.putClientProperty("JTree.lineStyle", "Angled");
            JTextField textField = new JTextField();
            TreeCellEditor editor = new DefaultCellEditor(textField);
            list.setCellEditor(editor);
            list.setEditable(true);
            list.startEditingAtPath(treePath);
            textField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusLost(FocusEvent e2) {
                    super.focusLost(e2);
                    JTextField jtf = (JTextField) e2.getSource();
                    boolean success = ff.renaming(ftpClient, finalFilePath, jtf.getText());
                    if (success){
                        notifyMessage = "Rename "+finalFilePath+" to /"+jtf.getText()+" Successfull";
                    }else notifyMessage = "Rename Fail";
                    list.setEditable(false);
                    notification(notifyMessage);
                    refresh();
                }
            });
            new Thread() {
                @Override
                public void run() {
                    int t = fileName.getName().lastIndexOf(".");
                    if(t == -1){
                        textField.setNavigationFilter(new filter(textField.getText().length(), textField));
                        textField.addKeyListener(new KeyAdapter() {
                            @Override
                            public void keyTyped(KeyEvent e3) {
                                super.keyTyped(e3);
                                textField.setNavigationFilter(new filter(textField.getText().length(), textField));
                            }
                        });
                    }else{
                        textField.setNavigationFilter(new filter(t, textField));
                        textField.addKeyListener(new KeyAdapter() {
                            @Override
                            public void keyTyped(KeyEvent e3) {
                                super.keyTyped(e3);
                                textField.setNavigationFilter(new filter(textField.getText().lastIndexOf("."), textField));
                            }
                        });
                    }
                }
            }.start();
        });

        //nút download
        jmndownload.addActionListener((ActionEvent e1) -> {
            if (!ftpClient.isConnected()) {
                notification("Please connect to a server");
                return;
            }
            notification("Downloading");
            String home = System.getProperty("user.home");
            try {
                downloadFile.deter(fileName.toString(), "", home+"/Downloads", ftpClient);
                notifyMessage = "Download File "+fileName.getName()+" Successfull";
                notification(notifyMessage);
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        //nút delete
        String finalFilePath1 = filePath;
        jmndelete.addActionListener((ActionEvent e1) -> {
            if (!ftpClient.isConnected()) {
                notification("Please connect to a server");
                return;
            }
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) list.getLastSelectedPathComponent();
            boolean leaf = selectedNode.isLeaf();
            notifyMessage = deleteFileOrFolder.deleteDeter(finalFilePath1, ftpClient, leaf);
            notification(notifyMessage);
            selectedNode.removeFromParent();
            serverTree.updateUI();
        });
    }
    //chức năng hiển thị menu ở client tree
    private void clientTreeRightClick(MouseEvent e) {
        JPopupMenu clientMenu = new JPopupMenu();
        JMenuItem jmnUpload = new JMenuItem("Upload");
        ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource("img/upload.png"));
        jmnUpload.setIcon(icon);
        clientMenu.add(jmnUpload);
        
        JTree list = (JTree) e.getSource();
        int row = list.getRowForLocation(e.getPoint().x, e.getPoint().y);
        TreePath treePath = list.getPathForLocation(e.getPoint().x, e.getPoint().y);
        String filePath = "";
        if (treePath != null) {
            filePath = treePath.toString().replace("]", "");
            filePath = filePath.replace("[", "").replaceAll(",", "/");
            filePath = filePath.replaceAll("/ ", "/");
        }
        
        File fileName = new File(filePath);
        
        list.setSelectionRow(row);
        clientMenu.show(this, getMousePosition().x, getMousePosition().y);
        
        jmnUpload.addActionListener((ActionEvent e1) -> {
            try {
                sendFile.deterSend(ftpClient, "\\" + fileName.getName(), fileName.toString(), "");
                notifyMessage = "Upload Successfull";
                notification(notifyMessage);
                refresh();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        });
    }
    //làm mới server tree
    private void refresh() {
        root.removeAllChildren();
        List<FTPFile> listFtpFiles = s.getListFileFromFTPServer("");
        addItemToTree(listFtpFiles);
        serverTree.updateUI();
    }
    //thêm item vào quick connect tool bar
    private void addMenuItem(File logFile){
        try{
            try (Scanner myReader = new Scanner(logFile)) {
                while (myReader.hasNextLine()) {
                    String data = myReader.nextLine();
                    JMenuItem userData = new JMenuItem(data);
                    popupMenu.add(userData);
                    userData.addActionListener((ActionEvent e) -> {
                        String selectedItem = e.getActionCommand();
                        selectedItem = selectedItem.replace("[", "");
                        selectedItem = selectedItem.replace("]", "");
                        String[] itemArray = selectedItem.split(", ");
                        Usernametf.setText(itemArray[0]);
                        Passtf.setText(itemArray[1]);
                        Servertf.setText(itemArray[2]);
                        Porttf.setText(itemArray[3]);
                    });
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void queueTableRightClick(MouseEvent evt) {
        ImageIcon icon;
        JPopupMenu queueMenu = new JPopupMenu();
        JMenuItem jmnQueueDownload = new JMenuItem("Download Queue");
        icon = new ImageIcon(getClass().getClassLoader().getResource("img/download.png"));
        jmnQueueDownload.setIcon(icon);
        queueMenu.add(jmnQueueDownload);
        JMenuItem jmnQueueDeleteSelected = new JMenuItem("Delete Selected");
        icon = new ImageIcon(getClass().getClassLoader().getResource("img/delete.png"));
        jmnQueueDeleteSelected.setIcon(icon);
        queueMenu.add(jmnQueueDeleteSelected);
        int row = queueTable.rowAtPoint(evt.getPoint());
        if(row >= 0 && row < queueTable.getRowCount()){
            queueTable.setRowSelectionInterval(row, row);
        }else{
            queueTable.clearSelection();
        }
        queueMenu.show(this, getMousePosition().x, getMousePosition().y);
        jmnQueueDownload.addActionListener((ActionEvent e) -> {
            for (String s1 : queueList){
                File f = new File(s1);
                String home = System.getProperty("user.home");
                try {
                    downloadFile.deter(findFilePath(f.getName(), pathList), "", home+"/Downloads", ftpClient);
                    notifyMessage = "Download "+f.getName()+" Successfull";
                    notification(notifyMessage);
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });
        jmnQueueDeleteSelected.addActionListener((ActionEvent e) -> {
            queueTableModel.removeRow(row);
            queueList.remove(row);
        });
    }
    public static TreePath getPath(TreeNode treeNode) {
    List<Object> nodes = new ArrayList<Object>();
    if (treeNode != null) {
      nodes.add(treeNode);
      treeNode = treeNode.getParent();
      while (treeNode != null) {
        nodes.add(0, treeNode);
        treeNode = treeNode.getParent();
      }
    }

    return nodes.isEmpty() ? null : new TreePath(nodes.toArray());
  }
}
